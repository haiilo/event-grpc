// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: Events.proto

package haiilo_grpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	GetEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (EventService_GetEventsClient, error)
	SubscribeEvents(ctx context.Context, in *EventSubscribeRequest, opts ...grpc.CallOption) (EventService_SubscribeEventsClient, error)
	GetEvent(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) GetEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (EventService_GetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], "/com.coyoapp.trap.grpcmessages.EventService/getEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_GetEventsClient interface {
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type eventServiceGetEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceGetEventsClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) SubscribeEvents(ctx context.Context, in *EventSubscribeRequest, opts ...grpc.CallOption) (EventService_SubscribeEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[1], "/com.coyoapp.trap.grpcmessages.EventService/subscribeEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceSubscribeEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_SubscribeEventsClient interface {
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type eventServiceSubscribeEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceSubscribeEventsClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) GetEvent(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, "/com.coyoapp.trap.grpcmessages.EventService/getEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	GetEvents(*EventRequest, EventService_GetEventsServer) error
	SubscribeEvents(*EventSubscribeRequest, EventService_SubscribeEventsServer) error
	GetEvent(context.Context, *StateRequest) (*StateResponse, error)
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) GetEvents(*EventRequest, EventService_GetEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedEventServiceServer) SubscribeEvents(*EventSubscribeRequest, EventService_SubscribeEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvents not implemented")
}
func (UnimplementedEventServiceServer) GetEvent(context.Context, *StateRequest) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).GetEvents(m, &eventServiceGetEventsServer{stream})
}

type EventService_GetEventsServer interface {
	Send(*EventResponse) error
	grpc.ServerStream
}

type eventServiceGetEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceGetEventsServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_SubscribeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).SubscribeEvents(m, &eventServiceSubscribeEventsServer{stream})
}

type EventService_SubscribeEventsServer interface {
	Send(*EventResponse) error
	grpc.ServerStream
}

type eventServiceSubscribeEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceSubscribeEventsServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.coyoapp.trap.grpcmessages.EventService/getEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEvent(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coyoapp.trap.grpcmessages.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getEvent",
			Handler:    _EventService_GetEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getEvents",
			Handler:       _EventService_GetEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "subscribeEvents",
			Handler:       _EventService_SubscribeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Events.proto",
}
